@page "/read-text"
@inject NavigationManager Navigation
@inject ReadingTimeService ReadingTimeService 
@inject HttpClient HttpClient
@using Shared.Models;

<h3>Read text</h3>

<div>
@if (fileContent == null)
{
    <p>Loading...</p>
}
else
{
    <p>@fileContent</p>
    <p>@ParagraphWordCount.ToString()</p>
}
</div>


<button class="btn btn-primary" @onclick="StopStopwatch">Finish reading</button>

@code {
    private int timeElapsed = 0;
    private System.Timers.Timer timer;
    private string fileContent = string.Empty;
    private ParagraphWordCount ParagraphWordCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Call the API to get the file content
            fileContent = await HttpClient.GetStringAsync("/api/files/read-text-file");
            var textId = await HttpClient.GetStringAsync("api/files/get-paragrapgh-id");
            String filename = $"{textId.Trim()}_text.txt";
            ParagraphWordCount = new ParagraphWordCount(CountWords(fileContent), filename); //calculate and store word count
        }
        catch (Exception ex)
        {
            fileContent = $"Error fetching file: {ex.Message}";
        }

        // Start the stopwatch on initialization
        await StartStopwatch();

        // Set up the timer for UI updates

    }
    private int CountWords(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
            return 0;

        //splits the text by words and counts them
        return text.Split(new[] { ' ', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries).Length;
    }

    private async Task StartStopwatch()
    {
        await HttpClient.GetAsync("api/timer/start");
    }

    private async Task StopStopwatch()
    {
        var response = await HttpClient.GetAsync("api/timer/stop");
        
        if (response.IsSuccessStatusCode)
        {
            var elapsedTimeString = await response.Content.ReadAsStringAsync();
            
            if (int.TryParse(elapsedTimeString, out int elapsedMilliseconds))
            {
                // Navigate to the quiz page with the elapsed time and word count as parameters
                Navigation.NavigateTo($"/quiz?elapsedTime={elapsedMilliseconds}&wordCount={ParagraphWordCount.Count}");
            }
            else
            {
                fileContent = "Error: Elapsed time is not in a correct format.";
            }
        }
        else
        {
            fileContent = $"Error stopping the stopwatch: {response.ReasonPhrase}";
        }
    }

}
