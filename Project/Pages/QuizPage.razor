@page "/quiz-page"
@using System.Text
@using System.Text.Json
@using Shared.Models
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject ReadingTimeService ReadingTimeService
<PageTitle>QUIZ</PageTitle>

<h1>QUIZ</h1>

@if (_quizSubmission.Questions == null)
{
    <p>Loading questions...</p>
}
else
{
        @foreach (var question in _quizSubmission.Questions)
        {
            <div class="question">
                <h4>@question.text</h4>
                @foreach (var option in question.options)
                {
                    <div>
                        <input type="radio" id="@option" name="q-@question.id" value="@option" 
                                   checked="@(question.userAnswer == option)" 
                                   @onchange="() => question.userAnswer = option" />
                            <label for="@option">@option</label>
                    </div>
                }
            </div>
        }
}


<div>
    <input type="text" @bind="userName" placeholder="Enter your name" />
</div>
<button class="btn btn-primary" @onclick="SubmitQuiz">Submit</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {

    QuizSubmission _quizSubmission = new QuizSubmission();
    private string userName = string.Empty;
    private string errorMessage; // Variable to hold error message

    private int elapsedTime;
    private int wordCount;

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        // Retrieve elapsed time and word count from query parameters
        elapsedTime = int.TryParse(query["elapsedTime"], out var time) ? time : 0;
        wordCount = int.TryParse(query["wordCount"], out var count) ? count : 0;
        // Fetch questions from the API
        // Get sorted questions
        _quizSubmission.Questions = await HttpClient.GetFromJsonAsync<List<Question>>("/api/questions/get-questions-sorted");
        
        // Get unsorted questions
        //_quizSubmission.Questions = await HttpClient.GetFromJsonAsync<List<Question>>("/api/questions/get-questions?fileName=sampleQuestions.json");
    }



    private async Task SubmitQuiz()
    {
        _quizSubmission.Filename = "UserRecord.json";
        _quizSubmission.UserName = userName;
        
        var content = new StringContent(JsonSerializer.Serialize(_quizSubmission), Encoding.UTF8, "application/json");
        var response = await HttpClient.PostAsync("/api/quiz/save-score", content);

        if (!response.IsSuccessStatusCode)
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Warning: {errorMessage}");
            return;
        }

        // Navigate to results page with elapsed time and word count
        Navigation.NavigateTo($"/results?elapsedTime={elapsedTime}&wordCount={wordCount}");
    }
}
